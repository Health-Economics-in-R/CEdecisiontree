% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/branch_joint_probs.R
\name{branch_joint_probs}
\alias{branch_joint_probs}
\alias{branch_joint_probs.transmat}
\alias{branch_joint_probs.dat_long}
\alias{branch_joint_probs.default}
\title{Branch Joint Probabilities}
\usage{
branch_joint_probs(model, ...)

\method{branch_joint_probs}{transmat}(model, nodes = NA, ...)

\method{branch_joint_probs}{dat_long}(model, nodes, ...)

\method{branch_joint_probs}{default}(model, nodes, ...)
}
\arguments{
\item{model}{Branch conditional probabilities (matrix)}

\item{...}{Additional parameters}

\item{nodes}{Which nodes to return; default to all}
}
\value{
Transition matrix with joint probabilities
}
\description{
Provides a measure of the chances of following
particular paths through the decision tree.
}
\details{
These probabilities could be used to weight branch costs
or QALYs to indicate the relative contribution to the
total expected value.
}
\examples{

model <-
  define_model(
    transmat =
      list(prob =
             matrix(data = c(NA, 0.5, 0.5, NA,  NA,  NA,  NA,
                             NA, NA, NA,   0.1, 0.9, NA,  NA,
                             NA, NA, NA,   NA,  NA,  0.9, 0.1),
                    nrow = 3,
                    byrow = TRUE),
           vals =
             matrix(data = c(NA, 1,  5,  NA, NA, NA, NA,
                             NA, NA, NA, 1,  9,  NA, NA,
                             NA, NA, NA, NA, NA, 9,  1),
                    nrow = 3,
                    byrow = TRUE)))
model

branch_joint_probs(model)

# weighted vals
branch_joint_probs(model)*model$vals

# long data format
df <-
  data.frame(
    from = c(1,2,1),
    to = c(2,3,4),
    prob = c(0.1,0.5,0.9),
    vals = c(1,2,3))

mod <- define_model(dat_long = df)

branch_joint_probs(mod, nodes = 4)
#0.9

branch_joint_probs(mod, nodes = 3)
#0.1*0.5

branch_joint_probs(mod, nodes = 3)[[1]] |> cumprod()

}
